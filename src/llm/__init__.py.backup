"""LLM integration package."""

from .llm_gateway import LLMGateway, llm_gateway
# Import configurations (optional)
try:
    from .config import *
except ImportError:
    pass

# Import LLM Gateway if available  
try:
    from .llm_gateway import LLMGateway, llm_gateway
except ImportError:
    LLMGateway = None
    llm_gateway = None

# Temporarily disable enhanced_autogen import due to syntax issues
# from .enhanced_autogen import EnhancedAutoGen, get_enhanced_autogen

# Basic fallback for testing
class BasicEnhancedAutoGen:
    def __init__(self):
        self.fallback_mode = True
        self.cursor_llm_enabled = False
    
    def process_message(self, message: str, recipients: list, sender: str = "user"):
        """Basic fallback for process_message to enable MCP server testing"""
        responses = {}
        for agent_id in recipients:
            responses[agent_id] = {
                "agent_id": agent_id,
                "message": f"ðŸ“§ Basic fallback response from {agent_id}: I received your message '{message[:50]}...' and I'm processing it with basic fallback mode while the full Cursor LLM bridge is being finalized.",
                "role": "fallback_agent",
                "method": "basic_fallback",
                "cursor_llm_enabled": False,
                "timestamp": "2025-09-11"
            }
        
        return {
            "success": True,
            "method": "basic_fallback",
            "autogen_enabled": False,
            "cursor_llm_enabled": False,
            "message_processed": True,
            "responses": responses,
            "note": "Using basic fallback while Cursor LLM bridge integration is being completed"
        }
    
    def create_agent(self, agent_id: str, role, project_id=None):
        """Basic fallback for create_agent"""
        return {
            "success": True,
            "agent_id": agent_id,
            "role": getattr(role, 'role_name', 'unknown'),
            "method": "basic_fallback",
            "message": f"Agent {agent_id} created with basic fallback"
        }
    
    def create_group_chat(self, chat_id: str, agents: list, project_id=None):
        """Basic fallback for create_group_chat"""
        return {
            "success": True,
            "chat_id": chat_id,
            "agents": agents,
            "method": "basic_fallback",
            "message": f"Group chat {chat_id} created with {len(agents)} agents"
        }
    
    def start_workflow(self, workflow_id: str, workflow_type: str, participants: list):
        """Basic fallback for start_workflow"""
        return {
            "success": True,
            "workflow_id": workflow_id,
            "workflow_type": workflow_type,
            "participants": participants,
            "method": "basic_fallback"
        }
    
    def get_roles(self):
        """Basic fallback for get_roles"""
        return [
            {"role_name": "coordinator", "description": "Project coordination"},
            {"role_name": "developer", "description": "Software development"},
            {"role_name": "reviewer", "description": "Code review"},
            {"role_name": "tester", "description": "Quality assurance"}
        ]
    
    def get_workflows(self):
        """Basic fallback for get_workflows"""
        return [
            {"workflow_id": "sprint_planning", "description": "Sprint planning workflow"},
            {"workflow_id": "code_review", "description": "Code review workflow"}
        ]
    
    def get_agent_info(self, agent_id: str):
        """Basic fallback for get_agent_info"""
        return {
            "agent_id": agent_id,
            "role": "fallback_agent",
            "status": "active",
            "method": "basic_fallback"
        }
    
    def get_chat_info(self, chat_id: str):
        """Basic fallback for get_chat_info"""
        return {
            "chat_id": chat_id,
            "status": "active",
            "method": "basic_fallback"
        }
    
    def start_conversation(self, conversation_id: str, participants: list, conversation_type="general"):
        """Basic fallback for start_conversation"""
        return {
            "success": True,
            "conversation_id": conversation_id,
            "participants": participants,
            "conversation_type": conversation_type,
            "method": "basic_fallback"
        }
    
    def process_message_sync(self, message: str, recipients: list, sender: str = "user"):
        return self.process_message(message, recipients, sender)

def get_enhanced_autogen():
    return BasicEnhancedAutoGen()

__all__ = ["LLMGateway", "llm_gateway", "BasicEnhancedAutoGen", "get_enhanced_autogen"]
